// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   //And16(a = x, b = false, out = zerx);
   Mux16(a = x, b = false, sel = zx, out = tmp1);
   Not16(in = tmp1, out = tmp2);
   Mux16(a = tmp1, b = tmp2, sel = nx, out = tmp3);
   
   //And16(a = y, b = false, out = zery);
   Mux16(a = y, b = false, sel = zy, out = tmp11);
   Not16(in = tmp11, out = tmp22);
   Mux16(a = tmp11, b = tmp22, sel = ny, out = tmp33);
   
   And16(a = tmp33, b = tmp3, out = andxy);
   Add16(a = tmp33, b = tmp3, out = sumxy);
   Mux16(a = andxy, b = sumxy, sel = f, out = tmpout);
   
   Not16(in = tmpout, out = negout);
   Mux16(a = tmpout, b = negout, sel = no, out = out, out[0..7] = out1, out[8..15] = out2, out[15] = ng);
   
   Or8Way(in = out1, out = tem1);
   Or8Way(in = out2, out = tem2);
   Or(a = tem1, b = tem2, out = notzr);
   Not(in = notzr, out = zr);
   
   
   
   

/**
   Not(in = zx, out = notzx);
   And16One(a = x, b = notzx, out = xpin1);
   Xor(a = xpin1, b = nx, out = xpin2);
   Not(in = zy, out = notzy);
   And16One(a = y, b = notzy, out = ypin1);
   Xor(a = ypin1, b = ny, out = ypin2);
   Add16(a = xpin2, b = ypin2, out = tempAdd);
   And16(a = xpin2, b = ypin2, out = tempAnd);
   Mux16(a = tempAnd, b = tempAdd, sel = f, out = tempOut);
   Not(in = no, out = tempNo);
   And16One(a = tempOut, b = tempNo, out = out, out = testOut);
   And(a = testOut, b = true, out = ng);
   Or16Way(in = testOut, out = tempZr);
   Not(in = tempZr, out = zr);
*/   
   
}